// Generated by CoffeeScript 1.9.2
var assert, fs, gd, path, util;

assert = require('chai').assert;

gd = require('../js/node-gd.js');

fs = require('fs');

path = require('path');

util = require('util');

describe('Node.js GD Graphics Library', function() {
  var source, target;
  source = __dirname + '/fixtures/';
  target = __dirname + '/output/';
  before(function() {
    console.log('Built on top of GD version: ' + gd.getGDVersion());
    return fs.readdir(target, function(err, files) {
      return files.forEach(function(file, idx) {
        if (file.substr(0, 6) === 'output') {
          return fs.unlink(target + file, function(err) {
            if (err) {
              throw err;
            }
          });
        }
      });
    });
  });
  it('can scale-down (resize) an image', function(done) {
    var s, t;
    s = source + 'input.png';
    t = target + 'output-scale.png';
    return gd.openPng(s, function(err, img) {
      var canvas, h, scale, w;
      if (err) {
        throw err;
      }
      scale = 2;
      w = Math.floor(img.width / scale);
      h = Math.floor(img.height / scale);
      canvas = gd.createTrueColorSync(w, h);
      img.copyResampled(canvas, 0, 0, 0, 0, w, h, img.width, img.height);
      return canvas.savePng(t, 1, function(err) {
        if (err) {
          throw err;
        }
        assert.ok(fs.existsSync(t));
        img.destroy();
        canvas.destroy();
        return done();
      });
    });
  });
  it('can rotate an image', function(done) {
    var s, t;
    s = source + 'input.png';
    t = target + 'output-rotate.png';
    return gd.openPng(s, function(err, img) {
      var canvas, h, w;
      if (err) {
        throw err;
      }
      w = 100;
      h = 100;
      canvas = gd.createTrueColorSync(w, h);
      img.copyRotated(canvas, 50, 50, 0, 0, img.width, img.height, 45);
      return canvas.savePng(t, 1, function(err) {
        if (err) {
          throw err;
        }
        assert.ok(fs.existsSync(t));
        img.destroy();
        canvas.destroy();
        return done();
      });
    });
  });
  it('can convert to grayscale', function(done) {
    var s, t;
    if (gd.getGDVersion() < '2.1.1') {
      done();
      return;
    }
    s = source + 'input.png';
    t = target + 'output-grayscale.png';
    return gd.openPng(s, function(err, img) {
      if (err) {
        throw err;
      }
      img.grayscale();
      return img.savePng(t, -1, function(err) {
        if (err) {
          throw err;
        }
        assert.ok(fs.existsSync(t));
        img.destroy();
        return done();
      });
    });
  });
  it('can create an image with text', function(done) {
    var f, img, t, txtColor;
    f = source + 'FreeSans.ttf';
    t = target + 'output-string.png';
    img = gd.createSync(200, 80);
    img.colorAllocate(0, 255, 0);
    txtColor = img.colorAllocate(255, 0, 255);
    img.stringFT(txtColor, f, 24, 0, 10, 60, "Hello world");
    return img.savePng(t, 1, function(err) {
      if (err) {
        throw err;
      }
      assert.ok(fs.existsSync(t));
      img.destroy();
      return done();
    });
  });
  it('can create a truecolor image with text', function(done) {
    var f, img, t, txtColor;
    f = source + 'FreeSans.ttf';
    t = target + 'output-truecolor-string.png';
    img = gd.createTrueColorSync(120, 20);
    txtColor = img.colorAllocate(255, 255, 0);
    img.stringFT(txtColor, f, 16, 0, 8, 18, "Hello world!");
    return img.savePng(t, 1, function(err) {
      if (err) {
        throw err;
      }
      assert.ok(fs.existsSync(t));
      img.destroy();
      return done();
    });
  });
  it('can add gaussian blur to an image', function(done) {
    var s, t;
    if (gd.getGDVersion() < '2.1.1') {
      done();
      return;
    }
    s = source + 'input.png';
    t = target + 'output-gaussianblur.png';
    return gd.openPng(s, function(err, img) {
      var i, j;
      if (err) {
        throw err;
      }
      for (i = j = 0; j < 10; i = ++j) {
        img.gaussianBlur();
      }
      return img.savePng(t, -1, function(err) {
        if (err) {
          throw err;
        }
        assert.ok(fs.existsSync(t));
        img.destroy();
        return done();
      });
    });
  });
  it('can negate an image', function(done) {
    var s, t;
    if (gd.getGDVersion() < '2.1.1') {
      done();
      return;
    }
    s = source + 'input.png';
    t = target + 'output-negate.png';
    return gd.openPng(s, function(err, img) {
      if (err) {
        throw err;
      }
      img.negate();
      return img.savePng(t, -1, function(err) {
        if (err) {
          throw err;
        }
        assert.ok(fs.existsSync(t));
        img.destroy();
        return done();
      });
    });
  });
  it('can change brightness of an image', function(done) {
    var s, t;
    if (gd.getGDVersion() < '2.1.1') {
      done();
      return;
    }
    s = source + 'input.png';
    t = target + 'output-brightness.png';
    return gd.openPng(s, function(err, img) {
      var brightness;
      if (err) {
        throw err;
      }
      brightness = Math.floor(Math.random() * 100);
      img.brightness(brightness);
      return img.savePng(t, -1, function(err) {
        if (err) {
          throw err;
        }
        assert.ok(fs.existsSync(t));
        img.destroy();
        return done();
      });
    });
  });
  it('can change contrast of an image', function(done) {
    var s, t;
    if (gd.getGDVersion() < '2.1.1') {
      done();
      return;
    }
    s = source + 'input.png';
    t = target + 'output-contrast.png';
    return gd.openPng(s, function(err, img) {
      var contrast;
      if (err) {
        throw err;
      }
      contrast = Math.floor(Math.random() * 2000) - 900;
      img.contrast(contrast);
      return img.savePng(t, -1, function(err) {
        if (err) {
          throw err;
        }
        assert.ok(fs.existsSync(t));
        img.destroy();
        return done();
      });
    });
  });
  it('can emboss an image', function(done) {
    var s, t;
    if (gd.getGDVersion() < '2.1.1') {
      done();
      return;
    }
    s = source + 'input.png';
    t = target + 'output-emboss.png';
    return gd.openPng(s, function(err, img) {
      if (err) {
        throw err;
      }
      img.emboss();
      return img.savePng(t, -1, function(err) {
        if (err) {
          throw err;
        }
        assert.ok(fs.existsSync(t));
        img.destroy();
        return done();
      });
    });
  });
  it('can apply selective blur to an image', function(done) {
    var s, t;
    if (gd.getGDVersion() < '2.1.1') {
      done();
      return;
    }
    s = source + 'input.png';
    t = target + 'output-selectiveBlur.png';
    return gd.openPng(s, function(err, img) {
      if (err) {
        throw err;
      }
      img.selectiveBlur();
      return img.savePng(t, -1, function(err) {
        if (err) {
          throw err;
        }
        assert.ok(fs.existsSync(t));
        img.destroy();
        return done();
      });
    });
  });
  it('can create a truecolor BMP image with text', function(done) {
    var f, img, t, txtColor;
    if (gd.getGDVersion() < '2.1.1') {
      done();
      return;
    }
    f = source + 'FreeSans.ttf';
    t = target + 'output-truecolor-string.bmp';
    img = gd.createTrueColorSync(120, 20);
    txtColor = img.colorAllocate(255, 255, 0);
    img.stringFT(txtColor, f, 16, 0, 8, 18, "Hello world!");
    return img.saveBmp(t, 0, function(err) {
      if (err) {
        throw err;
      }
      assert.ok(fs.existsSync(t));
      return done();
    });
  });
  it('can create a truecolor Tiff image with text', function(done) {
    var f, img, t, txtColor;
    if (gd.getGDVersion() < '2.1.1') {
      done();
      return;
    }
    f = source + 'FreeSans.ttf';
    t = target + 'output-truecolor-string.tif';
    img = gd.createTrueColorSync(120, 20);
    txtColor = img.colorAllocate(255, 255, 0);
    img.stringFT(txtColor, f, 16, 0, 8, 18, "Hello world!");
    return img.saveTiff(t, function(err) {
      if (err) {
        throw err;
      }
      assert.ok(fs.existsSync(t));
      return done();
    });
  });
  return describe('section Handling file types', function() {
    it('can copy a png into a jpeg', function(done) {
      var s, t;
      s = source + 'input.png';
      t = target + 'output.jpg';
      return gd.openPng(s, function(err, img) {
        var canvas;
        if (err) {
          throw err;
        }
        canvas = gd.createTrueColorSync(100, 100);
        img.copyResampled(canvas, 0, 0, 0, 0, 100, 100, img.width, img.height);
        return canvas.saveJpeg(t, 10, function(err) {
          if (err) {
            throw err;
          }
          assert.ok(fs.existsSync(t));
          img.destroy();
          canvas.destroy();
          return done();
        });
      });
    });
    it('can copy a png into gif', function(done) {
      var s, t;
      s = source + 'input.png';
      t = target + 'output.gif';
      return gd.openPng(s, function(err, img) {
        var canvas;
        if (err) {
          throw err;
        }
        canvas = gd.createTrueColorSync(img.width, img.height);
        img.copyResampled(canvas, 0, 0, 0, 0, img.width, img.height, img.width, img.height);
        return canvas.saveGif(t, function(err) {
          if (err) {
            throw err;
          }
          assert.ok(fs.existsSync(t));
          img.destroy();
          canvas.destroy();
          return done();
        });
      });
    });
    it('can copy a png into gd', function(done) {
      var s, t;
      s = source + 'input.png';
      t = target + 'output.gd';
      return gd.openPng(s, function(err, img) {
        var canvas;
        if (err) {
          throw err;
        }
        canvas = gd.createTrueColorSync(img.width, img.height);
        img.copyResampled(canvas, 0, 0, 0, 0, img.width, img.height, img.width, img.height);
        return canvas.saveGd(t, function(err) {
          if (err) {
            throw err;
          }
          assert.ok(fs.existsSync(t));
          img.destroy();
          canvas.destroy();
          return done();
        });
      });
    });
    it('can copy a png into WBMP', function(done) {
      var s, t;
      if (gd.getGDVersion() < '2.1.1') {
        done();
        return;
      }
      s = source + 'input.png';
      t = target + 'output.wbmp';
      gd.openPng(s, function(err, img) {
        var canvas, fg;
        if (err) {
          throw err;
        }
        canvas = gd.createTrueColorSync(img.width, img.height);
        img.copyResampled(canvas, 0, 0, 0, 0, img.width, img.height, img.width, img.height);
        fg = img.getPixel(5, 5);
        return canvas.saveWBMP(t, fg, function(err) {
          if (err) {
            throw err;
          }
          assert.ok(fs.existsSync(t));
          img.destroy();
          canvas.destroy();
          return done();
        });
      });
    });
    it('can open a jpeg file and save it as png', function(done) {
      var s, t;
      s = source + 'input.jpg';
      t = target + 'output-from-jpeg.png';
      return gd.openJpeg(s, function(err, img) {
        if (err) {
          throw err;
        }
        return img.savePng(t, -1, function(err) {
          if (err) {
            throw err;
          }
          assert.ok(fs.existsSync(t));
          img.destroy();
          return done();
        });
      });
    });
    return it('can open a bmp and save it as png', function(done) {
      var s, t;
      if (gd.getGDVersion() < '2.1.1') {
        done();
        return;
      }
      s = source + 'input.bmp';
      t = target + 'output-from-bmp.png';
      return gd.openBmp(s, function(err, img) {
        if (err) {
          throw err;
        }
        return img.savePng(t, -1, function(err) {
          if (err) {
            throw err;
          }
          assert.ok(fs.existsSync(t));
          img.destroy();
          return done();
        });
      });
    });
  });
});
